
JPA : Java Persistence API
        ㄴ Java ORM API 표준
                 ㄴ Object Relational Mapping
                    객체와 관계형 데이터베이스 Mapping      
                      ㄴ JAVA Object(class)
                           ㄴ Entity class
                           
                           
   JAVA Object(Entity class) <--> ORM <--> 관계형 데이터베이스          
                      
                       
                 
                                             Persistence Context
                                                
   Entity             Entity Manager   -->     Entity   Entity
   Manager    -->   
   Factory            Entity Manager   -->     Entity   Entity
   
   
   Entity : database 의 table 에 대응하는 class
            @Entity 어노테이션을 붙임
   
   
   Entity Manager Factory : Entity Manager instance 를 생성, 관리함
                            Application 을 실행하면 하나가 만들어짐
                            client 로부터 request 가 들어오면
                            Entity Manager Factory 가 Entity Manager 를 생성함 
   
   Entity Manager : Persistence Context(영속성 컨텍스트)에 접근해서
                    Entity 를 대상으로 database 작업(CRUD)을 처리함
                    
                    
                    Persistence Context
                    (영속성 컨텍스트)
                     
                    1차 cache
                    @Id   Entity             item2 라는 Entity 가 
  item2 을 얻고자   1L    item1              1차 cache 에 저장되지 않은 경우
  2L 로 조회함      2L    item2              DataBase 에서 조회함                      
  
  1차 cache 에서      item2 라는 Entity 를                        DataBase
  item2를 반환함      DataBase 에서 조회해서
                      1차 cache 에 저장함
                    
         
   1차 cache : item(Entity) 을 영속성 컨텍스트에 Map<Key, Value> 형태로 저장
               조회시에는 find() 메소드를 호출함
               
     ㄴ 동일한 transaction 에서 Key 값이 같은 경우에는
        동일한 Entity 임을 보장해 줌  <-- 동일성 보장
        
        
        
        
database 초기화 DDL AUTO Option

spring.jpa.hibernate.ddl-auto=create

create   : 기존 table 삭제한 후, 새 table 생성
none     : 사용하지 않음
create-drop : 기존 table 삭제한 후, 새 table 생성 / 종료할 때 table 삭제
update   : 변경된 내용만 반영
validate : Entity 와 table 이 정상적으로 Mapping 되었는지 확인함   

      
               
Query Method

 Query Method 이름 형식]
           ┌ 생략할 수 있음
    find(EntitiClass이름)By(멤버변수이름-DB의컬럼)
    
    
 Query Method 를 호출할려면
 JpaRepository 인터페이스를 extends 하는 인터페이스를 작성해야 함
 
 
    
    
    
    
    
    
        
@Query 어노테이션
  ㄴ Query Method 에 붙임
     JPQL(Java Persistence Query Language)을 작성할 수 있음            
               
                                 
Querydsl
  ㄴ JPQL 을 java code 로 작성할 수 있도록 도와주는 API
     java code 로 작성하기 때문에 compile 시에 오류를 발견할 수 있음
     동적으로 query 를 생성할 수 있음

maven repository > querydsl-jpa / querydsl-apt 



Spring Security 적용하기
	회원가입 / 로그인 / 로그아웃 에 적용
	회원 역할에 따라서 권한을 달리하여 접근할 수 있는 페이지를 다르게 할 수 있음



로그인, 로그아웃 기능 구현
	Spring Security 에서 UserDetailService 인터페이스를 implements 하는
	클래스를 작성해서 로그인 기능을 구현
	UserDetailService 인터페이스는 Database 에서 회원정보를 가져오는 역할을 함
		loadUserByUsername() 메소드를 오버로딩해서 
		회원정보를 조회하고 사용자의 정보와 권한을 갖는 
		UserDetail 인터페이스를 반환함
			ㄴ Spring Security 에서 회원의 정보를 담는 기능을 함
				 UserDetail 인터페이스를 implements 하는 클래스(User)를 사용함
														ㄴ 클래스(User)의 객체를 생성함
           

연관 관계 매핑
	(매핑된 Entity 를 조회할 때 지연로딩 방식과 즉시로딩 방식이 있음)
	즉시로딩 - @OneToOne(fetch=FetchType.EAGER)
		ㄴ @OneToOne, @ManyToOne 방식으로 매핑할 때 기본값
		ㄴ Entity 를 조회할 때 해당 Entity 와 Mapping 된 Entity 를 한꺼번에 조회함  
		ㄴ data 를 조회할 때 연관된 모든 객체의 데이터를 모두 다 한꺼번에 조회함
	지연로딩 - @OneToMany(fetch=FetchType.LAZY)
		ㄴ @OneToMany 방식으로 매핑할 때 기본값
		ㄴ 필요한 시점에 연관된 객체(Entity) 의 data 를 불러옴

연관 관계 매핑 종류
	1) 1 : 1 (@OneToOne)
	2) 1 : n (@OneToMany)
	3) n : 1 (@ManyToOne)
	4) n : n (@ManyToMany)
	
연관 관계 매핑 방향
	1) 단방향
	2) 양방향
	
	
N : 1 Mapping
	장바구니에는 고객이 구매하고자 하는 상품들을 담음
	하나의 장바구니에는 여러개의 상품을 담을 수 있음
	하나의 상품은 여러 장바구니에 담겨질 수 있음
	
	장바구니 Table - 장바구니 상품 Table - 상품 Table
	
	
Orders 테이블과 Order_item 테이블 관계 매핑하기
	orders 테이블(부모Table)의 order_id 컬럼(의 값)(reference key)을
	order_item 테이블(자식Table)의 order_id 컬럼(foreign key)에서 사용하도록 설정
   
   어떤 상품을 주문한지 알 수 있고 주문한 상품이 어떤 속해있는지 알 수 있음
   
                   